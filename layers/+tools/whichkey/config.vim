let g:which_key_map =  {}
let g:which_key_map = {
    \ 'name' : '+leader-key',
       \ '-' : 'Choose window' ,
       \ '/' : {
             \ 'name' : '+commenter',
             \ '/' : 'Comment toggle',
             \ 'a' : 'Comment beginning toggle',
             \ 'b' : 'Comment box',
             \ 'j' : 'Comment jump next',
             \ 'k' : 'Comment prev next',
             \ 'i' : 'Comment end toggle',
             \ 'w' : 'Comment wrap toggle',
             \ },
       \ '<Tab>' : 'Next buffer',
       \ '<S-Tab>' : 'Prev buffer',
       \ '1' : 'Buffer 1',
       \ '2' : 'Buffer 2',
       \ '3' : 'Buffer 3',
       \ '4' : 'Buffer 4',
       \ '5' : 'Buffer 5',
       \ '6' : 'Buffer 6',
       \ '7' : 'Buffer 7',
       \ '8' : 'Buffer 8',
       \ '9' : 'Buffer 9',
       \ '0' : 'Buffer 10',
    \ 'c' : {
          \ 'name' : '+coc',
             \ 'a' : 'Code action text object',
             \ 'c' : 'Code action current word',
             \ 'C' : 'Open coc config',
             \ 'f' : 'Coc format',
             \ 'g' : 'Coc git status',
             \ 'j' : 'Coc default next',
             \ 'k' : 'Coc default prev',
          \ 'l' : {
                \ 'name' : '+coc-list',
                   \ 'c' : 'Coc commands',
                   \ 'd' : 'Coc diagnostics',
                   \ 'e' : 'Coc extensions',
                   \ 'o' : 'File outline',
                   \ 'r' : 'Resume last coc list',
                   \ 's' : 'Search workspace symbols',
                \ },
          \ 'n' : 'Coc rename',
          \ 'r' : 'Coc refactor',
          \ 's' : 'Coc search {prompt}',
          \ 't' : 'Coc template',
          \ 'q' : 'Coc autofix current line',
          \ 'w' : 'Coc search word match {prompt}',
          \ 'x' : 'Coc cursors operate',
          \ },
    \ 'd' : {
          \ 'name' : '+denite',
             \ 'd' : 'Open denite',
          \ 'g' : {
                \ 'name' : '+denite-git',
                   \ 'b' : 'Git change branch',
                   \ 'l' : 'Git log all',
                \ }
          \ },
    \ 'e' : {
          \ 'name' : '+file-explorer',
             \ 'a' : 'Explorer to current file directory',
             \ 'd' : 'Vertical diffsplit',
             \ 'e' : 'Explorer to current directory',
          \ },
    \ 'f' : {
          \ 'name' : '+file-management',
          \ 'd' : {
                \ 'name' : '+file-finder',
                \ 'b' : 'Find on buffers',
                \ 'B' : 'Find on all buffers',
                \ 'c' : 'Find colorscheme',
                \ 'f' : 'Find files on directory',
                \ 'F' : 'Find files on directory (old)',
                \ 'g' : 'Files git status',
                \ 'G' : 'Git grep',
                \ 'l' : 'Find vimtex',
                \ 'k' : 'Find files with marks',
                \ 'm' : 'Find mru files',
                \ 'o' : 'Find old files',
                \ 'p' : 'Find on a project',
                \ 'P' : 'Find on a git project',
                \ 'r' : 'Search {word} in directory recursively',
                \ 'R' : 'Search word in directory recursively',
                \ 'v' : 'Find vista outline',
                \ },
             \ 'q' : 'Save all and quit',
             \ 'r' : 'Change working directory to file',
             \ 's' : 'Save buffer',
             \ 'S' : 'Save all buffers',
             \ 'y' : 'Yank relative path',
             \ 'Y' : 'Yank absolute path',
          \ },
    \ 'g' : {
          \ 'name' : '+git-operate',
             \ 'a' : 'Git add',
             \ 'A' : 'Git add all',
             \ 'b' : 'Git blame',
             \ 'B' : 'Gbrowse',
             \ 'c' : 'Gina commit',
             \ 'd' : {
                   \ 'name' : '+git-diff',
                   \ 'c' : 'Git diff cached',
                   \ 'd' : 'Git diff',
                   \ 't' : 'Git difftool',
                   \ 'h' : 'Git diffthis horizontal',
                   \ 'v' : 'Git diffthis vertical',
                   \ },
             \ 'F' : 'Git fetch',
             \ 'g' : 'Ggrep {word}',
             \ 'G' : 'Git log grep current file',
             \ 'l' : 'Git log quickfix',
             \ 'L' : 'Git log current file quickfix',
             \ 'm' : 'Magit status',
             \ 'o' : 'Gina log',
             \ 'p' : 'Git push',
             \ 'P' : 'Terminal git push',
             \ 's' : 'Gina status',
             \ 'v' : 'Git commit browser',
          \ },
    \ 'G' : 'Goyo toggle' ,
    \ 'h' : {
          \ 'name' : '+quick-highlight',
             \ 't' : 'Highlight this',
             \ 'r' : 'Highlight reset',
             \ 'w' : 'Highlight this whole word',
          \ },
    \ 'j' : {
          \ 'name' : '+java',
             \ 'c' : 'Javac compile',
             \ 'j' : 'Save compile run',
             \ 'r' : 'Compile run in vim',
          \ },
    \ 'K' : 'Thesaurus current word' ,
    \ 'l' : {
          \ 'name' : '+linediff',
          \ 'd' : 'Linediff selected',
          \ 'r' : 'Linediff reset',
          \ },
    \ 'm' : 'Mundotree toggle' ,
    \ 'n' : {
            \ 'name' : '+neomake/neoformat',
               \ 'c' : 'Clean neomake',
               \ 'f' : 'Neoformat',
               \ 'm' : 'Neomake',
            \ },
    \ 'o' : {
          \ 'name' : '+open',
             \ 'g' : 'Open file in google chrome',
             \ 'o' : 'Open file with xdg',
             \ 't' : 'Open floaterm',
          \ },
    \ 'q' : 'Quit nvim',
    \ 'r' : {
          \ 'name' : '+text-operate',
             \ 'a' : ['<Plug>(EasyAlign)', 'Easyalign'],
             \ 'A' : ['<Plug>(LiveEasyAlign)', 'Easyalign live'],
             \ 'c' : 'Lowercase entire file',
             \ 'C' : 'Capitalize entire file',
          \ 'e' : {
                \ 'name' : '+register',
                   \ 'd' : 'display-register-+abjk',
                   \ 'j' : 'Cycle forward',
                   \ 'J' : 'Paste cycle forward',
                   \ 'k' : 'Cycle backward',
                   \ 'K' : 'Paste cycle backward',
                \ },
          \ 'E' : 'Enumerate entire file',
          \ 'i' : 'Fix indentation',
          \ 'l' : 'Wrap paragraph to textwidth',
          \ 'n' : 'Search forward and replace',
          \ 'N' : 'Search backward and replace',
          \ 'p' : 'Duplicate paragraph',
          \ 'r' : 'Search and replace',
          \ 'R' : 'Search and replace current line',
          \ 's' : 'Remove whitespaces',
          \ 'w' : {
                \ 'name' : '+wordy',
                   \ 'n' : 'Next wordy',
                   \ 'p' : 'Prev wordy',
                   \ 'r' : 'Remove wordy',
                   \ 'w' : 'Wordy',
                \ }
          \ },
    \ 's' : {
          \ 'name' : '+sessions',
          \ 'c' : 'Close session',
          \ 'd' : 'Delete session {prompt}',
          \ 'l' : 'Load session {prompt}',
          \ 's' : 'Save session {prompt}',
          \ },
    \ 'S' : 'Startify open',
    \ 't' : {
          \ 'name' : '+tab-operate',
             \ 'n' : 'New tab',
             \ 'e' : 'Edit tab',
             \ 'm' : 'Move tab',
          \ },
    \ 'v' : {
          \ 'name' : 'Vimux',
             \ 'c' : 'Vimux prompt command',
             \ 'l' : 'Vimux run last command',
             \ 'i' : 'Vimux inspect runner',
             \ 'f' : 'Vimux zoom runner',
             \ 'q' : 'Vimux close runner',
             \ 'x' : 'Vimux interrupt runner',
          \ },
    \ 'w' : {
          \ 'name' : '+splits',
             \ '[' : 'Vertical resize minus',
             \ ']' : 'Vertical resize plus',
             \ '{' : 'Horizontal resize minus',
             \ '}' : 'Horizontal resize plus',
             \ 'd' : 'Delete buffer keep split',
             \ 'f' : 'Zoom split toggle',
             \ 'h' : 'Horizontal split',
             \ 'v' : 'Vertical split',
          \ },
    \ 'z' : {
          \ 'name' : '+folds',
             \ 'f' : 'Toggle fold',
             \ 'F' : 'Close all folds except current',
             \ 'j' : 'Next closed fold',
             \ 'k' : 'Prev closed fold',
             \ 'm' : 'Toggle fold all',
          \ },
    \ }

let g:which_key_map[' '] = {
      \ 'name' : '+easymotion',
         \ 'b' : 'Beginning of word backward',
         \ 'f' : 'Find {char} to the left',
         \ 'w' : 'Beginning of word forward',
      \ }

let g:which_key_localmap = {
      \ 'name' : '+local-leader-key'  ,
      \ 'c' : {
            \ 'name' : '+calendar',
               \ 'c' : 'Calendar default',
               \ 'd' : 'Calendar daily',
               \ 'h' : 'Calendar horizontal daily',
               \ 't' : 'Calendar clock',
               \ 'v' : 'Calendar vertical yearly',
               \ 'w' : 'Calendar weekly',
            \ },
      \ 'g' : {
            \ 'name' : '+golang-toolkit',
               \ 'c' : 'Go callees',
               \ 'C' : 'Go callers',
               \ 'd' : 'Go describe',
               \ 'i' : 'Go impl',
               \ 's' : 'Go callstack',
            \ },
      \ 'l'    : 'toggle-locationlist',
      \ 'm' : {
            \ 'name' : '+markdown',
               \ 'c' : 'Markdown preview stop',
               \ 'd' : 'Markdown preview toggle',
               \ 'o' : 'Markdown preview',
            \ 't' : {
                  \ 'name' : '+toc',
                     \ 'h' : 'Table of contents horizontal',
                     \ 't' : 'Table of contents',
                     \ 'v' : 'Table of contents vertical',
                  \ },
            \ },
      \ 'q'    : 'Toggle quickfix',
      \ 'r'    : 'Quick run',
      \ 's' : {
            \ 'name' : '+ui-toggles',
               \ 'c' : 'Conceal toggle',
               \ 'g' : 'Gutter toggle',
               \ 'p' : 'Rainbow pairs toggle',
               \ 's' : 'Spell checker toggle',
               \ 'w' : 'Text wrap toggle',
               \ 'l' : {
                     \ 'name' : '+cursor',
                     \ 'c' : 'Cursorcolumn toggle',
                     \ 'l' : 'Cursorline toggle',
                     \ },
            \ },
      \ 't' : {
            \ 'name' : '+taskwiki',
            \ 'b' : {
                  \ 'name' : '+taskwiki-burndown',
                  \ },
            \ 'c' : {
                  \ 'name' : '+taskwiki-choose',
                  \ },
            \ 'h' : {
                  \ 'name' : '+taskwiki-history',
                  \ },
            \ 'G' : {
                  \ 'name' : '+taskwiki-ghistory',
                  \ },
            \ 'W' : 'Open taskwarrior',
            \ },
      \ 'v' : {
            \ 'name' : '+vista',
               \ 'v' : 'Vista toggle',
               \ 'c' : 'Vista coc',
               \ 'o' : 'Vista open',
               \ 'x' : 'Vista close',
            \ },
      \ 'w' : {
            \ 'name' : '+vimwiki',
              \ 'd' : 'Vimwiki delete link',
              \ 'h' : 'Vimwiki to html',
              \ 'hh' : 'Vimwiki to html browse',
              \ 'H' : 'Vimwiki all to html',
              \ 'i' : 'Vimwiki diary index',
              \ 'l' : 'Vimwiki generate links',
              \ 'r' : 'Vimwiki rename link',
              \ 's' : 'Vimwiki UI select',
              \ 't' : 'Vimwiki index new tab',
              \ 'w' : 'Vimwiki index',
              \ ' ' : {
                    \ 'name' : '+diary',
                    \ 'i' : 'Vimwiki diary generate link',
                    \ 'm' : 'Vimwiki diary tomorrow',
                    \ 't' : 'Vimwiki diary today',
                    \ 'w' : 'Vimwiki diary note',
                    \ 'y' : 'Vimwiki diary yesterday',
                    \ },
              \ },
      \ 'W' : {
            \ 'name' : '+vimwiki-init',
            \ 'W' : 'Vimwiki index',
            \ 'I' : 'Vimwiki diary index',
            \ },
      \ '<Tab>' : 'Wipe current buffer',
      \ '<S-Tab>' : 'Wipe all except current buffer',
      \ }

let g:which_key_lsbgmap = {
      \ 'name' : '+left-square-brackets',
         \ '[' : 'Prev function beginning',
         \ ']' : 'Prev function end',
         \ '=' : 'Marker any prev',
         \ '-' : 'Marker same prev',
         \ "'" : 'Marker unique prev',
         \ '"' : 'Comment prev',
         \ 'b' : 'Buffer prev',
         \ 'B' : 'Buffer first',
         \ 'd' : 'Coc diagnostic prev',
         \ 'g' : 'Git prev chunk',
         \ 'l' : 'Locationlist prev',
         \ 'L' : 'Locationlist first',
         \ 't' : 'Tab prev',
         \ 'T' : 'Tab first',
         \ 'q' : 'Quickfix prev',
         \ 'Q' : 'Quickfix first',
      \ }

let g:which_key_rsbgmap = {
      \ 'name' : '+right-square-brackets',
         \ ']' : 'Next function beginning',
         \ '[' : 'Next function end',
         \ '=' : 'Marker any next',
         \ '-' : 'Marker same next',
         \ "'" : 'Marker unique next',
         \ '"' : 'Comment next',
         \ 'b' : 'Buffer next',
         \ 'B' : 'Buffer last',
         \ 'd' : 'Coc diagnostic next',
         \ 'g' : 'Git next chunk',
         \ 'l' : 'Locationlist next',
         \ 'L' : 'Locationlist last',
         \ 't' : 'Tab next',
         \ 'T' : 'Tab last',
         \ 'q' : 'Quickfix next',
         \ 'Q' : 'Quickfix last',
      \ }

let s:current_colorscheme = get(g:,"colors_name","")
if  s:current_colorscheme == "base16-default-dark"
    highlight WhichKeySeperator guibg=NONE ctermbg=NONE guifg=#a1b56c ctermfg=02
endif

let g:which_key_timeout = 300
let g:which_key_exit = ["\<C-[>", "\<C-c>", "\<C-g>"]

let g:which_key_display_names = {
      \       ' ': 'SPC',
      \   '<C-H>': 'BS',
      \   '<C-I>': 'TAB',
      \   '<TAB>': 'TAB',
      \ '<S-TAB>': 'S-TAB',
      \    '<CR>': 'RET',
      \ }
