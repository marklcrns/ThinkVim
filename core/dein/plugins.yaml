# why use yaml to manage plugins
# see http://genkisugimoto.com/blog/manage-vim-plugins-via-yaml/
# hook_source: only sourced once
# hook_add:    sourced everytime vim starts

# Normal Loading
# ==========================================

# StartUp Plugins{{{
# Core
# ----------------------------------------
- repo: Shougo/dein.vim

# Completion
# ----------------------------------------
- repo: neoclide/coc.nvim
  merge: 0
  rev: release
  hook_add: source $VIM_PATH/layers/+completion/coc/config.vim

# - repo: SirVer/ultisnips
#   hook_add: source $VIM_PATH/layers/+tools/ultisnips/config.vim

- repo: honza/vim-snippets
  depends: coc.nvim
  # depends: ultisnips

# UI
# ----------------------------------------
- repo: ryanoasis/vim-devicons
  hook_add: |
    let g:webdevicons_enable_denite = 1
    let g:webdevicons_enable_startify = 1

- repo: itchyny/lightline.vim
  hook_add: source $VIM_PATH/layers/+ui/lightline/config.vim

- repo: hardcoreplayers/vim-buffet
  on_event: [ VimEnter, BufReadPre, BufNew ]
  hook_add: source $VIM_PATH/layers/+ui/buffet/config.vim
  depends: lightline.vim

# - repo: bagrat/vim-buffet
#   on_event: [ VimEnter, BufReadPre, BufNew ]
#   hook_add: source $VIM_PATH/layers/+ui/buffet/config.vim
#   depends: lightline.vim

# Tools
# ----------------------------------------
- repo: airblade/vim-rooter
  on_event: FileType
  hook_add: |
    let g:rooter_change_directory_for_non_project_files = 'current'
    let g:rooter_manual_only = 0
    let g:rooter_patterns = [
        \ '.git/',
        \ 'README.*',
        \ 'node_modules/',
        \ 'pom.xml',
        \ 'env/',
        \ 'src/',
        \ '.root'
      \ ]
    let g:rooter_silent_chdir = 1
    let g:rooter_resolve_links = 1
    let g:rooter_cd_cmd = 'lcd'

- repo: christoomey/vim-tmux-navigator
  if: "! (has('win32') || has('win64'))"
  hook_add: |
    let g:tmux_navigator_disable_when_zoomed = 1

- repo: tpope/vim-unimpaired
- repo: tpope/vim-eunuch
# }}}



# Lazy Loading
# ==========================================

# Completion{{{
- repo: mattn/emmet-vim
  on_event: InsertEnter
  on_ft: [ html, css, javascript, javascriptreact ]
  hook_source: |
    let g:user_emmet_complete_tag = 0
    let g:user_emmet_install_global = 0
    let g:user_emmet_install_command = 0
    let g:user_emmet_mode = 'i'
    let g:user_emmet_leader_key = '<C-;>'

- repo: Shougo/echodoc.vim
  on_event: CompleteDone
  hook_source: |
    call echodoc#enable()
    let g:echodoc#type = "virtual"
# }}}

# Syntax{{{
# Linters & Formaters
# ----------------------------------------


# Syntax Helpers
# ----------------------------------------
- repo: luochen1990/rainbow
  on_ft: [python, javascript, javascriptreact, java, html, css, go, vim, toml]
  hook_source: |
    let g:rainbow_active = 0

- repo: tyru/caw.vim
  on_map: { nx: <Plug> }

- repo: machakann/vim-sandwich
  on_map: { vonx: <Plug>(operator-sandwich- }
  hook_add: |
    let g:sandwich_no_default_key_mappings = 1
    let g:operator_sandwich_no_default_key_mappings = 1
    let g:textobj_sandwich_no_default_key_mappings = 1

- repo: Raimondi/delimitMate
  on_event: FileType
  hook_source: source $VIM_PATH/layers/+syntax/delimitMate/config.vim

# Coding tools
# ----------------------------------------
- repo: junegunn/vim-easy-align
  on_ft: [vim, md, vimwiki, json, go, html, js, jsx, py, css, java, less, tmpl, toml, xml, sql, Dockerfile]
  hook_source: source $VIM_PATH/layers/+tools/vim-easy-align/config.vim

- repo: AndrewRadev/splitjoin.vim
  on_map: { n: <Plug>Splitjoin }

- repo: AndrewRadev/linediff.vim
  on_cmd: Linediff
  hook_add: |
    let g:linediff_indent = 1
    let g:linediff_first_buffer_command  = 'leftabove new'
    let g:linediff_further_buffer_command = 'rightbelow vertical new'
    let g:linediff_diffopt = 'filler,iwhite'

# - repo: terryma/vim-expand-region
#   on_map: { x: <Plug> }
# - repo: kana/vim-textobj-user  # only autoload functions, lazy by nature
# - repo: kana/vim-textobj-function
# - repo: kana/vim-operator-user
# - repo: kana/vim-operator-replace

- repo: kana/vim-niceblock
  on_map: { x: <Plug> }

- repo: kana/vim-smartchr
  on_event: InsertCharPre
# }}}

# Git{{{
- repo: jreybert/vimagit
  on_cmd: Magit

- repo: lambdalisue/gina.vim
  on_cmd: Gina

- repo: rhysd/committia.vim
  on_event: BufReadPost
  hook_add: |
    let g:committia_hooks = {}
    function! g:committia_hooks.edit_open(info)
        " Additional settings
        setlocal spell

        " If no commit message, start with insert mode
        if a:info.vcs ==# 'git' && getline(1) ==# ''
            startinsert
        endif

        " Scroll the diff window from insert mode
        " Map <C-n> and <C-p>
        imap <buffer><C-n> <Plug>(committia-scroll-diff-down-half)
        imap <buffer><C-p> <Plug>(committia-scroll-diff-up-half)
    endfunction

- repo: kristijanhusak/defx-git
  on_source: defx.nvim
  hook_source: source  $VIM_PATH/layers/+ui/defx/+defx-git.vim

- repo: tpope/vim-fugitive
  on_cmd:
    - G
    - Git
    - Gfetch
    - Gpush
    - Gstatus
    - Glog
    - Gclog
    - Gllog
    - Gdiffsplit
    - Gvdiffsplit

- repo: neoclide/denite-git
  on_cmd: Denite
# }}}

# Language{{{
- repo: pechorin/any-jump.vim
  on_cmd: AnyJump
  depends: vim-indent-guides
  hook_add: |
    let g:any_jump_disable_default_keybindings = 1
    let g:any_jump_window_width_ratio  = 0.6
    let g:any_jump_window_height_ratio = 0.6
    let g:any_jump_window_top_offset   = 10
    let g:any_jump_search_prefered_engine = 'rg'

# Java
# ----------------------------------------
# - repo: tpope/vim-classpath
#   on_ft: java

# Javascript
# ----------------------------------------
# - repo: chemzqm/vim-jsx-improve
#   on_ft: [javascript, javascriptreact]

# JSON
# ----------------------------------------
# - repo: elzr/vim-json
#   on_ft: json
#   hook_add: let g:vim_json_syntax_conceal = 0

# Markdown
# ---------------------------------------
- repo: plasticboy/vim-markdown
  on_ft: markdown
  hook_add: source $VIM_PATH/layers/+lang/markdown/vim-markdown/config.vim

- repo: iamcco/markdown-preview.nvim
  on_ft: [markdown, pandoc.markdown, rmd]
  build: 'cd app & yarn install'
  hook_source: source $VIM_PATH/layers/+lang/markdown/markdown-preview.nvim/config.vim

- repo: mzlogin/vim-markdown-toc
  hook_source: |
    let g:vmt_fence_text = 'TOC'
    let g:vmt_fence_closing_text = '/TOC'
  on_ft: markdown

- repo: junegunn/vim-emoji
  on_ft: [markdown, vim]

# LaTeX
# ---------------------------------------
# - repo: lervag/vimtex
#   on_ft: [tex, latex, plaintex]
#   hook_source: source $VIM_PATH/layers/+lang/latex/vimtex/config.vim
#
# - repo: KeitaNakamura/tex-conceal.vim
#   on_ft: [tex, latex, plaintex]
#   hook_source: |
#     let g:tex_conceal='abdmg'

# Python
# ----------------------------------------
- repo: vim-python/python-syntax
  on_ft: python
  hook_add: let g:python_highlight_all = 1

- repo: Vimjas/vim-python-pep8-indent
  on_ft: python

- repo: tmhedberg/SimpylFold
  on_ft: python

- repo: vim-scripts/python_match.vim
  on_ft: python

- repo: raimon49/requirements.txt.vim
  on_ft: requirements

# TOML
# ----------------------------------------
# - repo: cespare/vim-toml
#   on_ft: toml

# Typescript
# ----------------------------------------
# - repo: leafgarland/typescript-vim
#   on_ft: [typescriptreact, typescript]

# - repo: peitalin/vim-jsx-typescript
#   on_ft: [typescriptreact]

# XML
# ----------------------------------------
# - repo: vim-scripts/xml.vim
#   on_ft: xml

# YAML
# ----------------------------------------
- repo: pearofducks/ansible-vim
  on_ft: [yaml.ansible, ansible_hosts]
# }}}


# Tools{{{
# To setup Google Calendar with calenar.vim
# https://github.com/itchyny/calendar.vim#important-notice
- repo: itchyny/calendar.vim
  on_cmd: Calendar
  hook_source: source $VIM_PATH/layers/+tools/calendar/config.vim

- repo: t9md/vim-choosewin
  on_map: {n: <Plug>}
  hook_source: source  $VIM_PATH/layers/+tools/choosewin/config.vim

- repo: Shougo/denite.nvim
  on_cmd: Denite
  depends: vim-devicons
  hook_source: |
        source  $VIM_PATH/layers/+tools/denite/config.vim
        source  $VIM_PATH/layers/+tools/denite/+denite_menu.vim

- repo: junegunn/goyo.vim
  on_cmd: Goyo
  hook_source: source $VIM_PATH/layers/+tools/goyo/config.vim

- repo: junegunn/Limelight.vim
  on_cmd: Limelight
  depends: Goyo
  hook_source: source $VIM_PATH/layers/+tools/limelight/config.vim

- repo: liuchengxu/vim-clap
  merged: 0
  build: 'bash install.sh'
  on_map: { n: <Plug> }
  hook_add: source $VIM_PATH/layers/+tools/vim-clap/config.vim

- repo: vn-ki/coc-clap
  on_source: vim-clap

- repo: junegunn/gv.vim
  depends: vim-fugitive
  on_cmd: GV

- repo: ludovicchabant/vim-gutentags
  if: executable('ctags')
  on_event: [BufReadPost, BufWritePost]
  hook_source: source $VIM_PATH/layers/+tools/vim-gutentags/config.vim

- repo: liuchengxu/vista.vim
  on_cmd: Vista
  hook_source: source $VIM_PATH/layers/+tools/vista/config.vim

- repo: liuchengxu/vim-which-key
  on_cmd: [Whichkey, Whichkey!]
  hook_add: source $VIM_PATH/layers/+tools/whichkey/config.vim
  hook_post_source: |
    call which_key#register('<Space>', 'g:which_key_map')
    call which_key#register(';', 'g:which_key_localmap')
    call which_key#register(']', 'g:which_key_rsbgmap')
    call which_key#register('[', 'g:which_key_lsbgmap')
    call which_key#register('s', 'g:which_key_smap')
    call which_key#register('d', 'g:which_key_dmap')
    call which_key#register('g', 'g:which_key_gmap')

- repo: metakirby5/codi.vim
  on_cmd: Codi
  hook_source: source $VIM_PATH/layers/+tools/codi/config.vim

- repo: benmills/vimux
  on_cmd:
    - VimuxPromptCommand
    - VimuxRunLastCommand
    - VimuxInspectRunner
    - VimuxCloseRunner
    - VimuxInterruptRunner
    - VimuxZoomRunner
  hook_source: |
    let g:VimuxPromptString = "Bash command? $ "
    let g:VimuxUseNearest = 0
    let g:VimuxOrientation = 'v'

- repo: voldikss/vim-floaterm
  on_cmd: [FloatermNew, FloatermToggle, FloatermPrev, FloatermNext, FloatermSend]
  hook_source: source  $VIM_PATH/layers/+tools/floaterm/config.vim

- repo: vimwiki/vimwiki
  on_if: (getcwd() =~ $HOME . "/Docs/wiki.\*" && &filetype == 'markdown')  # load when in wiki directory
  on_event: BufEnter
  on_cmd: [VimwikIndex, VimwikiDiaryIndex, VimwikiUISelect]
  hook_add: |
    let g:vimwiki_use_calendar = 1
    let g:vimwiki_hl_headers = 1
    let g:vimwiki_hl_cb_checked = 1
    let g:vimwiki_autowriteall = 0
    let g:vimwiki_map_prefix = '<LocalLeader>w'
    let g:vimwiki_folding = 'custom'
    let g:vimwiki_table_mappings = 0
  hook_source: source $VIM_PATH/layers/+tools/vimwiki/config.vim

- repo: tbabej/taskwiki
  on_ft: vimwiki
  hook_source: |
    let g:taskwiki_markup_syntax = 'markdown'
    let g:taskwiki_dont_preserve_folds = 'yes'
    let g:taskwiki_disable_concealcursor = 'yes'
    let g:taskwiki_suppress_mappings = 'yes'

- repo: xarthurx/taskwarrior.vim
  on_event: FileType

- repo: honza/dockerfile.vim
  on_ft: Dockerfile

- repo: thinca/vim-quickrun
  on_cmd: QuickRun
  hook_add: |
        let g:quickrun_config = {
            \   "_" : {
            \       "outputter" : "message",
            \   },
            \}
        let g:quickrun_no_default_key_mappings = 1

# TODO: Fix conflict when using Codi on python
- repo: kshenoy/vim-signature
  on_event: FileType
  hook_add: |
    let g:SignatureForceRemoveGlobal = 1
    let g:SignatureUnconditionallyRecycleMarks = 1
    let g:SignatureErrorIfNoAvailableMarks = 0
    let g:SignaturePurgeConfirmation = 0
    let g:SignatureMarkTextHLDynamic = 1
    let g:SignatureMarkerTextHLDynamic = 1
    let g:SignatureIncludeMarkers = repeat('⚐', 10)

- repo: Ron89/thesaurus_query.vim
  on_cmd:
    - Thesaurus
    - ThesaurusQueryReplaceCurrentWord
    - ThesaurusQueryLookupCurrentWord
  hook_add: |
    let g:tq_map_keys = 0
    let g:tq_use_vim_autocomplete = 0

- repo: reedes/vim-wordy
  on_cmd: [Wordy, NextWordy, PrevWordy]

- repo: rhysd/vim-grammarous
  on_cmd: [GrammarousCheck, GrammarousReset]
  hook_add: source $VIM_PATH/layers/+tools/vim-grammarous/config.vim

- repo: tpope/vim-abolish
  on_event: FileType

- repo: arthurxavierx/vim-caser
  on_ft: [vim, md, vimwiki, json, go, html, js, jsx, py, css, java, less, tmpl, toml, xml, sql, Dockerfile]

- repo: simnalamburt/vim-mundo
  on_map: {n: <Plug>}

- repo: tpope/vim-repeat
  on_map: .*

- repo: easymotion/vim-easymotion
  on_map: {n: <Plug>}
  hook_source: |
    let g:EasyMotion_do_mapping = 0
    let g:EasyMotion_prompt = 'Jump to → '
    let g:EasyMotion_keys = 'fjdkswbeoavn'
    let g:EasyMotion_smartcase = 1
    let g:EasyMotion_use_smartsign_us = 1

- repo: t9md/vim-quickhl
  on_map: { nv: <Plug> }

- repo: brooth/far.vim
  on_cmd: [Far, Farr, Farf]
# }}}

# UI{{{
- repo: nathanaelkane/vim-indent-guides
  on_event: VimEnter
  hook_post_source: IndentGuidesEnable
  hook_add: source $VIM_PATH/layers/+ui/vim-indent-guides/config.vim

- repo: mhinz/vim-startify
  on_cmd: [ Startify, SSave, SLoad, SDelete ]
  depends: vim-devicons
  hook_source: source $VIM_PATH/layers/+ui/startify/config.vim
  hook_post_source: |
      function! StartifyEntryFormat()
        return 'WebDevIconsGetFileTypeSymbol(absolute_path) ." ". entry_path'
      endfunction

- repo: norcalli/nvim-colorizer.lua
  if: has('nvim') && has('nvim-0.4.0')
  on_event: FileType
  hook_source: luafile $VIM_PATH/layers/+ui/colorizer/colorizer.lua

- repo: KabbAmine/vCoolor.vim
  if: has('nvim') && has('nvim-0.4.0')
  on_cmd: [VCoolor, VCoolIns]
  hook_add: |
    let g:vcoolor_disable_mappings = 1
    let g:vcoolor_lowercase = 1

- repo: amadeus/vim-convert-color-to
  on_cmd: ConvertColorTo

# - repo: itchyny/vim-cursorword
#   on_event: FileType
#   hook_source: |
#     augroup user_plugin_cursorword
#       autocmd!
#       autocmd FileType denite,qf,easygitblame let b:cursorword = 0
#       autocmd WinEnter * if &diff | let b:cursorword = 0 | endif
#       autocmd InsertEnter * let b:cursorword = 0
#       autocmd InsertLeave * let b:cursorword = 1
#     augroup END

- repo: psliwka/vim-smoothie
  on_func: smoothie#
  hook_add: |
    let g:smoothie_no_default_mappings = v:true

- repo: rhysd/accelerated-jk
  on_map: { n: <Plug> }

- repo: dhruvasagar/vim-zoom
  on_map: { n: <Plug> }

- repo: Shougo/defx.nvim
  on_cmd: Defx
  hook_source: source $VIM_PATH/layers/+ui/defx/config.vim

- repo: kristijanhusak/defx-icons
  on_source: defx.nvim
# }}}


# ETC {{{
- repo: ThePrimeagen/vim-be-good
  on_cmd: VimBeGood

- repo: dstein64/vim-startuptime
  on_event: VimEnter
# }}}

