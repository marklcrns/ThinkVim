# A valid snippet should starts with:
#
#   snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#   endsnippet
#
# Snippet options:
#
#   b - Beginning of line.
#   i - In-word expansion.
#   w - Word boundary.
#   r - Regular expression
#   e - Custom context snippet
#   A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#   snippet emitter "emitter properties" b
#   private readonly ${1} = new Emitter<$2>()
#   public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#   endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt

# Must be in root folder for auto package detect to work. Use vim-rooter
snippet temp "Java class template" bA
`!p
import os, re
root = os.getcwd()
rel_path = re.sub(root + '/src/', '', path)
package_path = re.sub(fn, '', rel_path)
snip.rv = "package " + package_path.replace('/', '.')[:-1] + ';'`

/**
 * Author: Mark Lucernas
 * Date: `date '+%Y-%m-%d'`
 */
public class `!p snip.rv = fn.rstrip('.java')` {$0}
endsnippet

snippet ctemp "Java basic class template with constructor" bA
`!p
import os, re
root = os.getcwd()
rel_path = re.sub(root + '/src/', '', path)
package_path = re.sub(fn, '', rel_path)
snip.rv = "package " + package_path.replace('/', '.')[:-1] + ';'`

/**
 * Author: Mark Lucernas
 * Date: `date '+%Y-%m-%d'`
 */
public class `!p snip.rv = fn.rstrip('.java')` {
  /**
   * Constructor
   */
  `!p snip.rv = fn.rstrip('.java') + "()"` {
    $0
  }
}
endsnippet

snippet mtemp "Java basic template with main method" bA
`!p
import os, re
root = os.getcwd()
rel_path = re.sub(root + '/src/', '', path)
package_path = re.sub(fn, '', rel_path)
snip.rv = "package " + package_path.replace('/', '.')[:-1] + ';'`

/**
 * Author: Mark Lucernas
 * Date: `date '+%Y-%m-%d'`
 */
public class `!p snip.rv = fn.rstrip('.java')` {
  public static void main(String[] args) {
    $0
  }
}
endsnippet

snippet itemp "Java basic interface template" bA
`!p
import os, re
root = os.getcwd()
rel_path = re.sub(root + '/src/', '', path)
package_path = re.sub(fn, '', rel_path)
snip.rv = "package " + package_path.replace('/', '.')[:-1] + ';'`

/**
 * Author: Mark Lucernas
 * Date: `date '+%Y-%m-%d'`
 */
public interface `!p snip.rv = fn.rstrip('.java')` {
  $0
}
endsnippet

snippet atemp "Java basic abstract class template" bA
`!p
import os, re
root = os.getcwd()
rel_path = re.sub(root + '/src/', '', path)
package_path = re.sub(fn, '', rel_path)
snip.rv = "package " + package_path.replace('/', '.')[:-1] + ';'`

/**
 * Author: Mark Lucernas
 * Date: `date '+%Y-%m-%d'`
 */
public abstract class `!p snip.rv = fn.rstrip('.java')` {
  $0
}
endsnippet

snippet etemp "Java enum class template" bA
`!p
import os, re
root = os.getcwd()
rel_path = re.sub(root + '/src/', '', path)
package_path = re.sub(fn, '', rel_path)
snip.rv = "package " + package_path.replace('/', '.')[:-1] + ';'`

/**
 * Author: Mark Lucernas
 * Date: `date '+%Y-%m-%d'`
 */
public enum `!p snip.rv = fn.rstrip('.java')` {
  $0
}
endsnippet

snippet customtemp "java basic Class template" bA
`!p
import os, re
root = os.getcwd()
rel_path = re.sub(root + '/src/', '', path)
package_path = re.sub(fn, '', rel_path)
snip.rv = "package " + package_path.replace('/', '.')[:-1] + ';'`

/**
 * ${1:Class description...}
 *
 * @author ${2:Mark Lucernas}
 */
public class `!p snip.rv = fn.rstrip('.java')` extends Object {
    //////////////////// fields ////////////////////
    ${3:Type} ${4:varName1};
    ${5:Type} ${6:varName2};
    ${7:Type} ${8:varName3};

    ///////////////// constructors /////////////////
    /**
     * No-argument constructor
     */
    public `!p snip.rv = fn.rstrip('.java')`() {}

    /**
     * ${6:Constructor description...}
     * @param $4
     * @param $6
     * @param $8
     */
    public `!p snip.rv = fn.rstrip('.java')`($3 $4, $5 $6, $7 $8) {
      this.$4 = $4;
      this.$6 = $6;
      this.$8 = $8;
    }

    //////////////////// methods ///////////////////
    public String toString() {
      return "";
    }
}
endsnippet

snippet head "Java javadoc header" bA
/**
 * Author: Mark Lucernas
 * Date: `date '+%Y-%m-%d'`
 */
endsnippet

snippet /* "Java Comment" b
/*
 * $0
 */
endsnippet

snippet /* "Description" w
/* $0 */
endsnippet


snippet /** "Java javadoc" b
/**
 * $0
 */
endsnippet

clearsnippets
snippet 'for(i|j|x|y)' "Java generic for loop" rA
`!p
var = match.group(1)
snip.rv = f"for (int {var} = 0; {var} < $1; {var}++) " + "{\n\t$0\n}"
`
endsnippet

snippet pln "Java System.out.println" wA
System.out.println(${0:${VISUAL}});
endsnippet

snippet dpln "Java debug System.out.println" wA
////////// DELETE ME LATER //////////
System.out.println(${0:${VISUAL}});
endsnippet
